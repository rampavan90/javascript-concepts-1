{"id":"js/arrays.js","dependencies":[{"name":"/home/pavan/Documents/projects/unilog/javascript-concepts/package.json","includedInParent":true,"mtime":1620473750586}],"generated":{"js":"//api\nvar postsObj = {};\nvar postsPromise = fetch('https://jsonplaceholder.typicode.com/posts').then(function (response) {\n  return response.json();\n});\nvar posts = postsPromise.then(function (json) {\n  return json;\n});\nposts.then(function (results) {\n  var postsArray = [];\n  postsArray = Object.entries(results);\n  console.log(postsArray[0]); //Iterate Foreach => llows to run a function for every element of the array.\n  //return function is ignored\n  // postsArray.forEach((post,postIndex, postArray) => { \n  //     // console.log(post[1].userId);\n  //     // console.log(postIndex);\n  //     // console.log(postArray);\n  // });\n  //Searching in array\n  // arr.indexOf(item, from) – looks for item starting from index from, and returns the index where it was found, otherwise -1.\n  // arr.lastIndexOf(item, from) – same, but looks for from right to left.\n  // arr.includes(item, from) – looks for item starting from index from, returns true if found.\n  // If we want to check for inclusion, and don’t want to know the exact index, then arr.includes is preferred.\n  // let fruits = ['Apple', 'Pear', 'Banana'];\n  // console.log(fruits.includes('Apple')); //case sensitive\n  //find and findIndex How do we find an object with the specific condition?\n  //The find method looks for a single (first) element that makes the function return true.\n  // let result = postsArray.find(post => post[1].userId === 2);\n  // console.log(result);\n  //findindex returns index where element is found\n  // filter\n  //same as find but for many items\n  // let result = postsArray.filter(post => post[1].userId === 2);\n  // console.log(result);\n\n  /*--Transform an araay and reorder an array--*/\n  // map => very useful returns new array after transforming\n  // let postsStartTexts = postsArray.map(post => post[1].title.slice(0,10));\n  // console.log(postsStartTexts);\n  //Sort => sorts array in place || coverted to string and sort by default\n  // so we have to write sort function\n  // let arr = [ 15, 1, 2 ];\n  // function compare(a, b) {\n  //     if (a > b) return 1; // if the first value is greater than the second\n  //     if (a == b) return 0; // if values are equal\n  //     if (a < b) return -1; // if the first value is less than the second\n  //   }\n  //   arr.sort(compare);\n  //   console.log(arr);\n  //reverse => reverses the order of elements in arr. || returns new array\n  //Split and join ?\n  //reduce\n  // When we need to iterate over an array – we can use forEach, for or for..of.\n  // When we need to iterate and return the data for each element – we can use map.\n  //reduce is used for calculating a single value based on the array\n  // arguments: accumulator – is the result of the previous function call, equals initial the first time (if initial is provided).\n  // item – is the current array item.\n  // index – is its position.\n  // array – is the array.\n  // let arr = [1, 2, 3, 4 , 5];\n  // let result = arr.reduce((sum, current) => sum + current, 0)\n  // console.log(result);\n}); // Arrays usage\n//ordered collection || indexed data structure\n//list of something: users, goods, HTML elements etc.\n// insert between two elements, Objects don't provide those functionality\n//Declaration\n// let arr = new Array();\n// let arr = []; // mostly used\n// Indexed from 0 || access elements || replace el || add more items to array\n// length property\n//can store any type of elements || nested\n// queue || Push, push appends an element to the end || shift get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. || FIFO\n// stack || push adds an element to the end.\n// pop takes an element from the end. || LIFO\n// let fruits = [\"Apple\", \"Orange\", \"Pear\"];\n// let fruitPopped = fruits.pop();\n// console.log(fruitPopped);\n// fruits.push(\"Pear\");\n// console.log(fruits);\n//Shift => Extracts the first element of the array and returns it:\n//Unshift => Add the element to the beginning of the array:\n//Array => special kind of obj || Object with addditional methods\n// it is copied by ref\n// contiguous ordered data => use arrays\n// arbitrary keys => use Objects\n//Don't do this even if you can like an object\n// let fruits = []; // make an array\n// fruits[99999] = 5; // assign a property with the index far greater than its length\n// console.log(fruits);\n// fruits.age = 25; // create a property with an arbitrary name\n// /But the engine will see that we’re working with the array as with a regular object. Array-specific optimizations are not suited for such cases and will be turned off, their benefits disappear.\n//ways to misuse an array\n//Add a non-numeric property like arr.test = 5.\n// Make holes, like: add arr[0] and then arr[1000] (and nothing between them).\n// Fill the array in the reverse order, like arr[1000], arr[999] and so on.\n//Performance\n//Methods push/pop run fast, while shift/unshift are slow.\n//Loops\n// let arr = [\"Apple\", \"Orange\", \"Pear\"];\n// for (let i = 0; i < arr.length; i++) {\n//   alert( arr[i] );\n// }\n// let fruits = [\"Apple\", \"Orange\", \"Plum\"];\n// // iterates over array elements => only value\n// for (let fruit of fruits) {\n//   alert( fruit );\n// }\n//as arrays for objects\n// let arr = [\"Apple\", \"Orange\", \"Pear\"];\n// // have internal properties\n// for (let key in arr) { \n//   alert(key); // Apple, Orange, Pear\n// }\n//The for..in loop is optimized for generic objects, not arrays, and thus is 10-100 times slower. Of course, it’s still very fast. The speedup may only matter in bottlenecks. But still we should be aware of the difference.\n// Generally, we shouldn’t use for..in for arrays.\n//length is writable => Don't do this\n//clear array length = 0\n// let arr = [1, 2];\n// arr.length = 0;\n// console.log(arr[0]);\n//Don't compare arrays with ===\n// Let’s recall the rules:\n// Two objects are equal == only if they’re references to the same object.\n// If one of the arguments of == is an object, and the other one is a primitive, then the object gets converted to primitive, as explained in the chapter Object to primitive conversion.\n// …With an exception of null and undefined that equal == each other and nothing else.\n// The strict comparison === is even simpler, as it doesn’t convert types.\n// So, if we compare arrays with ==, they are never the same, unless we compare two variables that reference exactly the same array.\n// alert( [] == [] ); // false\n// alert( [0] == [0] ); // false\n// So, how to compare arrays?\n// That’s simple: don’t use the == operator. Instead, compare them item-by-item in a loop or using iteration methods \n\n/*-----------Array methods---------------*/\n//Add remove items\n// arr.push(...items) – adds items to the end,\n// arr.pop() – extracts an item from the end,\n// arr.shift() – extracts an item from the beginning,\n// arr.unshift(...items) – adds items to the beginning.\n//splice => insert remove and replace elements\n//slice create arrays => It’s similar to a string method str.slice, but instead of substrings it makes subarrays.\n//concat: new array hat includes values from other arrays and additional items.\n// let arr = [1, 2];\n// arr = arr.concat([3,4],[5,6], 7, 8);\n// console.log(arr);\n//Practical examples => top => Transform an array and search arrays\n//for comparing type of arrays\n//Array.isArray\n// alert(Array.isArray({})); // false\n// alert(Array.isArray([])); // true\n// Almost all array methods that call functions – like find, filter, map, with a notable exception of sort, accept an optional additional parameter thisArg. => Not used that often\n//we can cover probably while covering objects\n\n/*----------End--------------------------*/"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/arrays.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"js/arrays.js","original":{"line":2,"column":0}},{"name":"postsObj","generated":{"line":2,"column":4},"source":"js/arrays.js","original":{"line":2,"column":4}},{"generated":{"line":2,"column":12},"source":"js/arrays.js","original":{"line":2,"column":12}},{"generated":{"line":2,"column":15},"source":"js/arrays.js","original":{"line":2,"column":14}},{"generated":{"line":2,"column":17},"source":"js/arrays.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"js/arrays.js","original":{"line":4,"column":0}},{"name":"postsPromise","generated":{"line":3,"column":4},"source":"js/arrays.js","original":{"line":4,"column":6}},{"generated":{"line":3,"column":16},"source":"js/arrays.js","original":{"line":4,"column":18}},{"name":"fetch","generated":{"line":3,"column":19},"source":"js/arrays.js","original":{"line":4,"column":21}},{"generated":{"line":3,"column":24},"source":"js/arrays.js","original":{"line":4,"column":26}},{"generated":{"line":3,"column":25},"source":"js/arrays.js","original":{"line":4,"column":27}},{"generated":{"line":3,"column":69},"source":"js/arrays.js","original":{"line":4,"column":26}},{"generated":{"line":3,"column":70},"source":"js/arrays.js","original":{"line":4,"column":21}},{"name":"then","generated":{"line":3,"column":71},"source":"js/arrays.js","original":{"line":5,"column":1}},{"generated":{"line":3,"column":75},"source":"js/arrays.js","original":{"line":4,"column":21}},{"generated":{"line":3,"column":76},"source":"js/arrays.js","original":{"line":5,"column":6}},{"name":"response","generated":{"line":3,"column":86},"source":"js/arrays.js","original":{"line":5,"column":7}},{"generated":{"line":3,"column":94},"source":"js/arrays.js","original":{"line":5,"column":6}},{"generated":{"line":4,"column":0},"source":"js/arrays.js","original":{"line":5,"column":6}},{"name":"response","generated":{"line":4,"column":9},"source":"js/arrays.js","original":{"line":5,"column":20}},{"generated":{"line":4,"column":17},"source":"js/arrays.js","original":{"line":5,"column":28}},{"name":"json","generated":{"line":4,"column":18},"source":"js/arrays.js","original":{"line":5,"column":29}},{"generated":{"line":4,"column":22},"source":"js/arrays.js","original":{"line":5,"column":20}},{"generated":{"line":4,"column":24},"source":"js/arrays.js","original":{"line":5,"column":6}},{"generated":{"line":5,"column":0},"source":"js/arrays.js","original":{"line":5,"column":6}},{"generated":{"line":5,"column":1},"source":"js/arrays.js","original":{"line":4,"column":21}},{"generated":{"line":5,"column":2},"source":"js/arrays.js","original":{"line":4,"column":0}},{"generated":{"line":6,"column":0},"source":"js/arrays.js","original":{"line":6,"column":0}},{"name":"posts","generated":{"line":6,"column":4},"source":"js/arrays.js","original":{"line":6,"column":6}},{"generated":{"line":6,"column":9},"source":"js/arrays.js","original":{"line":6,"column":11}},{"name":"postsPromise","generated":{"line":6,"column":12},"source":"js/arrays.js","original":{"line":6,"column":14}},{"generated":{"line":6,"column":24},"source":"js/arrays.js","original":{"line":6,"column":26}},{"name":"then","generated":{"line":6,"column":25},"source":"js/arrays.js","original":{"line":6,"column":27}},{"generated":{"line":6,"column":29},"source":"js/arrays.js","original":{"line":6,"column":14}},{"generated":{"line":6,"column":30},"source":"js/arrays.js","original":{"line":6,"column":32}},{"name":"json","generated":{"line":6,"column":40},"source":"js/arrays.js","original":{"line":6,"column":33}},{"generated":{"line":6,"column":44},"source":"js/arrays.js","original":{"line":6,"column":32}},{"generated":{"line":7,"column":0},"source":"js/arrays.js","original":{"line":6,"column":32}},{"name":"json","generated":{"line":7,"column":9},"source":"js/arrays.js","original":{"line":6,"column":42}},{"generated":{"line":7,"column":13},"source":"js/arrays.js","original":{"line":6,"column":32}},{"generated":{"line":8,"column":0},"source":"js/arrays.js","original":{"line":6,"column":32}},{"generated":{"line":8,"column":1},"source":"js/arrays.js","original":{"line":6,"column":14}},{"generated":{"line":8,"column":2},"source":"js/arrays.js","original":{"line":6,"column":0}},{"name":"posts","generated":{"line":9,"column":0},"source":"js/arrays.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":5},"source":"js/arrays.js","original":{"line":7,"column":5}},{"name":"then","generated":{"line":9,"column":6},"source":"js/arrays.js","original":{"line":7,"column":6}},{"generated":{"line":9,"column":10},"source":"js/arrays.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":11},"source":"js/arrays.js","original":{"line":7,"column":11}},{"name":"results","generated":{"line":9,"column":21},"source":"js/arrays.js","original":{"line":7,"column":20}},{"generated":{"line":9,"column":28},"source":"js/arrays.js","original":{"line":7,"column":11}},{"generated":{"line":9,"column":30},"source":"js/arrays.js","original":{"line":7,"column":28}},{"generated":{"line":10,"column":0},"source":"js/arrays.js","original":{"line":8,"column":4}},{"name":"postsArray","generated":{"line":10,"column":6},"source":"js/arrays.js","original":{"line":8,"column":8}},{"generated":{"line":10,"column":16},"source":"js/arrays.js","original":{"line":8,"column":18}},{"generated":{"line":10,"column":19},"source":"js/arrays.js","original":{"line":8,"column":21}},{"generated":{"line":10,"column":21},"source":"js/arrays.js","original":{"line":8,"column":4}},{"name":"postsArray","generated":{"line":11,"column":0},"source":"js/arrays.js","original":{"line":9,"column":4}},{"name":"postsArray","generated":{"line":11,"column":2},"source":"js/arrays.js","original":{"line":9,"column":4}},{"generated":{"line":11,"column":12},"source":"js/arrays.js","original":{"line":9,"column":14}},{"name":"Object","generated":{"line":11,"column":15},"source":"js/arrays.js","original":{"line":9,"column":17}},{"generated":{"line":11,"column":21},"source":"js/arrays.js","original":{"line":9,"column":23}},{"name":"entries","generated":{"line":11,"column":22},"source":"js/arrays.js","original":{"line":9,"column":24}},{"generated":{"line":11,"column":29},"source":"js/arrays.js","original":{"line":9,"column":17}},{"name":"results","generated":{"line":11,"column":30},"source":"js/arrays.js","original":{"line":9,"column":32}},{"generated":{"line":11,"column":37},"source":"js/arrays.js","original":{"line":9,"column":17}},{"generated":{"line":11,"column":38},"source":"js/arrays.js","original":{"line":9,"column":4}},{"name":"console","generated":{"line":12,"column":0},"source":"js/arrays.js","original":{"line":10,"column":4}},{"name":"console","generated":{"line":12,"column":2},"source":"js/arrays.js","original":{"line":10,"column":4}},{"generated":{"line":12,"column":9},"source":"js/arrays.js","original":{"line":10,"column":11}},{"name":"log","generated":{"line":12,"column":10},"source":"js/arrays.js","original":{"line":10,"column":12}},{"generated":{"line":12,"column":13},"source":"js/arrays.js","original":{"line":10,"column":4}},{"name":"postsArray","generated":{"line":12,"column":14},"source":"js/arrays.js","original":{"line":10,"column":16}},{"generated":{"line":12,"column":24},"source":"js/arrays.js","original":{"line":10,"column":26}},{"generated":{"line":12,"column":25},"source":"js/arrays.js","original":{"line":10,"column":27}},{"generated":{"line":12,"column":26},"source":"js/arrays.js","original":{"line":10,"column":26}},{"generated":{"line":12,"column":27},"source":"js/arrays.js","original":{"line":10,"column":4}},{"generated":{"line":12,"column":29},"source":"js/arrays.js","original":{"line":7,"column":28}},{"generated":{"line":12,"column":30},"source":"js/arrays.js","original":{"line":11,"column":4}},{"generated":{"line":13,"column":0},"source":"js/arrays.js","original":{"line":12,"column":4}},{"generated":{"line":14,"column":0},"source":"js/arrays.js","original":{"line":13,"column":4}},{"generated":{"line":15,"column":0},"source":"js/arrays.js","original":{"line":14,"column":4}},{"generated":{"line":16,"column":0},"source":"js/arrays.js","original":{"line":15,"column":4}},{"generated":{"line":17,"column":0},"source":"js/arrays.js","original":{"line":16,"column":4}},{"generated":{"line":18,"column":0},"source":"js/arrays.js","original":{"line":17,"column":4}},{"generated":{"line":19,"column":0},"source":"js/arrays.js","original":{"line":19,"column":4}},{"generated":{"line":20,"column":0},"source":"js/arrays.js","original":{"line":20,"column":4}},{"generated":{"line":21,"column":0},"source":"js/arrays.js","original":{"line":21,"column":4}},{"generated":{"line":22,"column":0},"source":"js/arrays.js","original":{"line":22,"column":4}},{"generated":{"line":23,"column":0},"source":"js/arrays.js","original":{"line":24,"column":4}},{"generated":{"line":24,"column":0},"source":"js/arrays.js","original":{"line":25,"column":4}},{"generated":{"line":25,"column":0},"source":"js/arrays.js","original":{"line":26,"column":4}},{"generated":{"line":26,"column":0},"source":"js/arrays.js","original":{"line":28,"column":4}},{"generated":{"line":27,"column":0},"source":"js/arrays.js","original":{"line":29,"column":4}},{"generated":{"line":28,"column":0},"source":"js/arrays.js","original":{"line":31,"column":4}},{"generated":{"line":29,"column":0},"source":"js/arrays.js","original":{"line":32,"column":4}},{"generated":{"line":30,"column":0},"source":"js/arrays.js","original":{"line":34,"column":4}},{"generated":{"line":31,"column":0},"source":"js/arrays.js","original":{"line":36,"column":4}},{"generated":{"line":32,"column":0},"source":"js/arrays.js","original":{"line":38,"column":4}},{"generated":{"line":33,"column":0},"source":"js/arrays.js","original":{"line":40,"column":4}},{"generated":{"line":34,"column":0},"source":"js/arrays.js","original":{"line":41,"column":4}},{"generated":{"line":36,"column":0},"source":"js/arrays.js","original":{"line":43,"column":4}},{"generated":{"line":37,"column":0},"source":"js/arrays.js","original":{"line":45,"column":4}},{"generated":{"line":38,"column":0},"source":"js/arrays.js","original":{"line":47,"column":4}},{"generated":{"line":39,"column":0},"source":"js/arrays.js","original":{"line":48,"column":4}},{"generated":{"line":40,"column":0},"source":"js/arrays.js","original":{"line":50,"column":4}},{"generated":{"line":41,"column":0},"source":"js/arrays.js","original":{"line":51,"column":4}},{"generated":{"line":42,"column":0},"source":"js/arrays.js","original":{"line":52,"column":4}},{"generated":{"line":43,"column":0},"source":"js/arrays.js","original":{"line":53,"column":4}},{"generated":{"line":44,"column":0},"source":"js/arrays.js","original":{"line":54,"column":4}},{"generated":{"line":45,"column":0},"source":"js/arrays.js","original":{"line":55,"column":4}},{"generated":{"line":46,"column":0},"source":"js/arrays.js","original":{"line":56,"column":4}},{"generated":{"line":47,"column":0},"source":"js/arrays.js","original":{"line":57,"column":4}},{"generated":{"line":48,"column":0},"source":"js/arrays.js","original":{"line":59,"column":4}},{"generated":{"line":49,"column":0},"source":"js/arrays.js","original":{"line":60,"column":4}},{"generated":{"line":50,"column":0},"source":"js/arrays.js","original":{"line":62,"column":4}},{"generated":{"line":51,"column":0},"source":"js/arrays.js","original":{"line":64,"column":4}},{"generated":{"line":52,"column":0},"source":"js/arrays.js","original":{"line":66,"column":4}},{"generated":{"line":53,"column":0},"source":"js/arrays.js","original":{"line":67,"column":4}},{"generated":{"line":54,"column":0},"source":"js/arrays.js","original":{"line":69,"column":4}},{"generated":{"line":55,"column":0},"source":"js/arrays.js","original":{"line":71,"column":4}},{"generated":{"line":56,"column":0},"source":"js/arrays.js","original":{"line":73,"column":4}},{"generated":{"line":57,"column":0},"source":"js/arrays.js","original":{"line":74,"column":4}},{"generated":{"line":58,"column":0},"source":"js/arrays.js","original":{"line":75,"column":4}},{"generated":{"line":59,"column":0},"source":"js/arrays.js","original":{"line":76,"column":4}},{"generated":{"line":60,"column":0},"source":"js/arrays.js","original":{"line":77,"column":4}},{"generated":{"line":61,"column":0},"source":"js/arrays.js","original":{"line":78,"column":4}},{"generated":{"line":62,"column":0},"source":"js/arrays.js","original":{"line":79,"column":4}},{"generated":{"line":63,"column":0},"source":"js/arrays.js","original":{"line":83,"column":1}},{"generated":{"line":63,"column":1},"source":"js/arrays.js","original":{"line":7,"column":0}},{"generated":{"line":63,"column":4},"source":"js/arrays.js","original":{"line":87,"column":0}},{"generated":{"line":64,"column":0},"source":"js/arrays.js","original":{"line":88,"column":0}},{"generated":{"line":65,"column":0},"source":"js/arrays.js","original":{"line":89,"column":0}},{"generated":{"line":66,"column":0},"source":"js/arrays.js","original":{"line":90,"column":0}},{"generated":{"line":67,"column":0},"source":"js/arrays.js","original":{"line":92,"column":0}},{"generated":{"line":68,"column":0},"source":"js/arrays.js","original":{"line":94,"column":0}},{"generated":{"line":69,"column":0},"source":"js/arrays.js","original":{"line":95,"column":0}},{"generated":{"line":70,"column":0},"source":"js/arrays.js","original":{"line":97,"column":0}},{"generated":{"line":71,"column":0},"source":"js/arrays.js","original":{"line":98,"column":0}},{"generated":{"line":72,"column":0},"source":"js/arrays.js","original":{"line":99,"column":0}},{"generated":{"line":73,"column":0},"source":"js/arrays.js","original":{"line":101,"column":0}},{"generated":{"line":74,"column":0},"source":"js/arrays.js","original":{"line":103,"column":0}},{"generated":{"line":75,"column":0},"source":"js/arrays.js","original":{"line":104,"column":0}},{"generated":{"line":76,"column":0},"source":"js/arrays.js","original":{"line":106,"column":0}},{"generated":{"line":77,"column":0},"source":"js/arrays.js","original":{"line":107,"column":0}},{"generated":{"line":78,"column":0},"source":"js/arrays.js","original":{"line":108,"column":0}},{"generated":{"line":79,"column":0},"source":"js/arrays.js","original":{"line":110,"column":0}},{"generated":{"line":80,"column":0},"source":"js/arrays.js","original":{"line":111,"column":0}},{"generated":{"line":81,"column":0},"source":"js/arrays.js","original":{"line":114,"column":0}},{"generated":{"line":82,"column":0},"source":"js/arrays.js","original":{"line":115,"column":0}},{"generated":{"line":83,"column":0},"source":"js/arrays.js","original":{"line":117,"column":0}},{"generated":{"line":84,"column":0},"source":"js/arrays.js","original":{"line":118,"column":0}},{"generated":{"line":85,"column":0},"source":"js/arrays.js","original":{"line":120,"column":0}},{"generated":{"line":86,"column":0},"source":"js/arrays.js","original":{"line":121,"column":0}},{"generated":{"line":87,"column":0},"source":"js/arrays.js","original":{"line":123,"column":0}},{"generated":{"line":88,"column":0},"source":"js/arrays.js","original":{"line":125,"column":0}},{"generated":{"line":89,"column":0},"source":"js/arrays.js","original":{"line":126,"column":0}},{"generated":{"line":90,"column":0},"source":"js/arrays.js","original":{"line":127,"column":0}},{"generated":{"line":91,"column":0},"source":"js/arrays.js","original":{"line":128,"column":0}},{"generated":{"line":92,"column":0},"source":"js/arrays.js","original":{"line":130,"column":0}},{"generated":{"line":93,"column":0},"source":"js/arrays.js","original":{"line":132,"column":0}},{"generated":{"line":94,"column":0},"source":"js/arrays.js","original":{"line":134,"column":0}},{"generated":{"line":95,"column":0},"source":"js/arrays.js","original":{"line":135,"column":0}},{"generated":{"line":96,"column":0},"source":"js/arrays.js","original":{"line":136,"column":0}},{"generated":{"line":97,"column":0},"source":"js/arrays.js","original":{"line":138,"column":0}},{"generated":{"line":98,"column":0},"source":"js/arrays.js","original":{"line":140,"column":0}},{"generated":{"line":99,"column":0},"source":"js/arrays.js","original":{"line":142,"column":0}},{"generated":{"line":100,"column":0},"source":"js/arrays.js","original":{"line":143,"column":0}},{"generated":{"line":101,"column":0},"source":"js/arrays.js","original":{"line":145,"column":0}},{"generated":{"line":102,"column":0},"source":"js/arrays.js","original":{"line":146,"column":0}},{"generated":{"line":103,"column":0},"source":"js/arrays.js","original":{"line":147,"column":0}},{"generated":{"line":104,"column":0},"source":"js/arrays.js","original":{"line":149,"column":0}},{"generated":{"line":105,"column":0},"source":"js/arrays.js","original":{"line":151,"column":0}},{"generated":{"line":106,"column":0},"source":"js/arrays.js","original":{"line":152,"column":0}},{"generated":{"line":107,"column":0},"source":"js/arrays.js","original":{"line":153,"column":0}},{"generated":{"line":108,"column":0},"source":"js/arrays.js","original":{"line":154,"column":0}},{"generated":{"line":109,"column":0},"source":"js/arrays.js","original":{"line":156,"column":0}},{"generated":{"line":110,"column":0},"source":"js/arrays.js","original":{"line":158,"column":0}},{"generated":{"line":111,"column":0},"source":"js/arrays.js","original":{"line":159,"column":0}},{"generated":{"line":112,"column":0},"source":"js/arrays.js","original":{"line":160,"column":0}},{"generated":{"line":113,"column":0},"source":"js/arrays.js","original":{"line":161,"column":0}},{"generated":{"line":114,"column":0},"source":"js/arrays.js","original":{"line":162,"column":0}},{"generated":{"line":115,"column":0},"source":"js/arrays.js","original":{"line":164,"column":0}},{"generated":{"line":116,"column":0},"source":"js/arrays.js","original":{"line":166,"column":0}},{"generated":{"line":117,"column":0},"source":"js/arrays.js","original":{"line":168,"column":0}},{"generated":{"line":118,"column":0},"source":"js/arrays.js","original":{"line":169,"column":0}},{"generated":{"line":119,"column":0},"source":"js/arrays.js","original":{"line":170,"column":0}},{"generated":{"line":120,"column":0},"source":"js/arrays.js","original":{"line":171,"column":0}},{"generated":{"line":121,"column":0},"source":"js/arrays.js","original":{"line":172,"column":0}},{"generated":{"line":122,"column":0},"source":"js/arrays.js","original":{"line":174,"column":0}},{"generated":{"line":123,"column":0},"source":"js/arrays.js","original":{"line":177,"column":0}},{"generated":{"line":124,"column":0},"source":"js/arrays.js","original":{"line":179,"column":0}},{"generated":{"line":125,"column":0},"source":"js/arrays.js","original":{"line":181,"column":0}},{"generated":{"line":126,"column":0},"source":"js/arrays.js","original":{"line":183,"column":0}},{"generated":{"line":127,"column":0},"source":"js/arrays.js","original":{"line":185,"column":0}},{"generated":{"line":128,"column":0},"source":"js/arrays.js","original":{"line":187,"column":0}},{"generated":{"line":129,"column":0},"source":"js/arrays.js","original":{"line":189,"column":0}},{"generated":{"line":130,"column":0},"source":"js/arrays.js","original":{"line":190,"column":0}},{"generated":{"line":131,"column":0},"source":"js/arrays.js","original":{"line":193,"column":0}},{"generated":{"line":132,"column":0},"source":"js/arrays.js","original":{"line":195,"column":0}},{"generated":{"line":134,"column":0},"source":"js/arrays.js","original":{"line":198,"column":0}},{"generated":{"line":135,"column":0},"source":"js/arrays.js","original":{"line":200,"column":0}},{"generated":{"line":136,"column":0},"source":"js/arrays.js","original":{"line":201,"column":0}},{"generated":{"line":137,"column":0},"source":"js/arrays.js","original":{"line":202,"column":0}},{"generated":{"line":138,"column":0},"source":"js/arrays.js","original":{"line":203,"column":0}},{"generated":{"line":139,"column":0},"source":"js/arrays.js","original":{"line":204,"column":0}},{"generated":{"line":140,"column":0},"source":"js/arrays.js","original":{"line":206,"column":0}},{"generated":{"line":141,"column":0},"source":"js/arrays.js","original":{"line":208,"column":0}},{"generated":{"line":142,"column":0},"source":"js/arrays.js","original":{"line":210,"column":0}},{"generated":{"line":143,"column":0},"source":"js/arrays.js","original":{"line":212,"column":0}},{"generated":{"line":144,"column":0},"source":"js/arrays.js","original":{"line":213,"column":0}},{"generated":{"line":145,"column":0},"source":"js/arrays.js","original":{"line":214,"column":0}},{"generated":{"line":146,"column":0},"source":"js/arrays.js","original":{"line":216,"column":0}},{"generated":{"line":147,"column":0},"source":"js/arrays.js","original":{"line":218,"column":0}},{"generated":{"line":148,"column":0},"source":"js/arrays.js","original":{"line":219,"column":0}},{"generated":{"line":149,"column":0},"source":"js/arrays.js","original":{"line":220,"column":0}},{"generated":{"line":150,"column":0},"source":"js/arrays.js","original":{"line":222,"column":0}},{"generated":{"line":151,"column":0},"source":"js/arrays.js","original":{"line":224,"column":0}},{"generated":{"line":152,"column":0},"source":"js/arrays.js","original":{"line":225,"column":0}},{"generated":{"line":154,"column":0},"source":"js/arrays.js","original":{"line":235,"column":0}}],"sources":{"js/arrays.js":"//api\nlet postsObj ={};\n\nconst postsPromise = fetch('https://jsonplaceholder.typicode.com/posts')\n.then((response) => response.json());\nconst posts = postsPromise.then((json) => json);\nposts.then(function(results){\n    let postsArray = [];\n    postsArray = Object.entries(results);\n    console.log(postsArray[0]);\n    //Iterate Foreach => llows to run a function for every element of the array.\n    //return function is ignored\n    // postsArray.forEach((post,postIndex, postArray) => { \n    //     // console.log(post[1].userId);\n    //     // console.log(postIndex);\n    //     // console.log(postArray);\n    // });\n\n    //Searching in array\n    // arr.indexOf(item, from) – looks for item starting from index from, and returns the index where it was found, otherwise -1.\n    // arr.lastIndexOf(item, from) – same, but looks for from right to left.\n    // arr.includes(item, from) – looks for item starting from index from, returns true if found.\n\n    // If we want to check for inclusion, and don’t want to know the exact index, then arr.includes is preferred.\n    // let fruits = ['Apple', 'Pear', 'Banana'];\n    // console.log(fruits.includes('Apple')); //case sensitive\n\n    //find and findIndex How do we find an object with the specific condition?\n    //The find method looks for a single (first) element that makes the function return true.\n\n    // let result = postsArray.find(post => post[1].userId === 2);\n    // console.log(result);\n\n    //findindex returns index where element is found\n\n    // filter\n\n    //same as find but for many items\n\n    // let result = postsArray.filter(post => post[1].userId === 2);\n    // console.log(result);\n\n    /*--Transform an araay and reorder an array--*/\n    \n    // map => very useful returns new array after transforming\n\n    // let postsStartTexts = postsArray.map(post => post[1].title.slice(0,10));\n    // console.log(postsStartTexts);\n\n    //Sort => sorts array in place || coverted to string and sort by default\n    // so we have to write sort function\n    // let arr = [ 15, 1, 2 ];\n    // function compare(a, b) {\n    //     if (a > b) return 1; // if the first value is greater than the second\n    //     if (a == b) return 0; // if values are equal\n    //     if (a < b) return -1; // if the first value is less than the second\n    //   }\n\n    //   arr.sort(compare);\n    //   console.log(arr);\n\n    //reverse => reverses the order of elements in arr. || returns new array\n\n    //Split and join ?\n\n    //reduce\n    // When we need to iterate over an array – we can use forEach, for or for..of.\n\n    // When we need to iterate and return the data for each element – we can use map.\n\n    //reduce is used for calculating a single value based on the array\n\n    // arguments: accumulator – is the result of the previous function call, equals initial the first time (if initial is provided).\n    // item – is the current array item.\n    // index – is its position.\n    // array – is the array.\n    // let arr = [1, 2, 3, 4 , 5];\n    // let result = arr.reduce((sum, current) => sum + current, 0)\n    // console.log(result);\n\n    \n\n});\n\n\n\n// Arrays usage\n//ordered collection || indexed data structure\n//list of something: users, goods, HTML elements etc.\n// insert between two elements, Objects don't provide those functionality\n\n//Declaration\n\n// let arr = new Array();\n// let arr = []; // mostly used\n\n// Indexed from 0 || access elements || replace el || add more items to array\n// length property\n//can store any type of elements || nested\n\n// queue || Push, push appends an element to the end || shift get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. || FIFO\n\n// stack || push adds an element to the end.\n// pop takes an element from the end. || LIFO\n \n// let fruits = [\"Apple\", \"Orange\", \"Pear\"];\n// let fruitPopped = fruits.pop();\n// console.log(fruitPopped);\n\n// fruits.push(\"Pear\");\n// console.log(fruits);\n\n\n//Shift => Extracts the first element of the array and returns it:\n//Unshift => Add the element to the beginning of the array:\n\n//Array => special kind of obj || Object with addditional methods\n// it is copied by ref\n\n// contiguous ordered data => use arrays\n// arbitrary keys => use Objects\n\n//Don't do this even if you can like an object\n\n// let fruits = []; // make an array\n// fruits[99999] = 5; // assign a property with the index far greater than its length\n// console.log(fruits);\n// fruits.age = 25; // create a property with an arbitrary name\n\n// /But the engine will see that we’re working with the array as with a regular object. Array-specific optimizations are not suited for such cases and will be turned off, their benefits disappear.\n\n//ways to misuse an array\n\n//Add a non-numeric property like arr.test = 5.\n// Make holes, like: add arr[0] and then arr[1000] (and nothing between them).\n// Fill the array in the reverse order, like arr[1000], arr[999] and so on.\n\n//Performance\n\n//Methods push/pop run fast, while shift/unshift are slow.\n\n//Loops\n// let arr = [\"Apple\", \"Orange\", \"Pear\"];\n\n// for (let i = 0; i < arr.length; i++) {\n//   alert( arr[i] );\n// }\n\n// let fruits = [\"Apple\", \"Orange\", \"Plum\"];\n\n// // iterates over array elements => only value\n// for (let fruit of fruits) {\n//   alert( fruit );\n// }\n\n//as arrays for objects\n\n// let arr = [\"Apple\", \"Orange\", \"Pear\"];\n// // have internal properties\n// for (let key in arr) { \n//   alert(key); // Apple, Orange, Pear\n// }\n\n//The for..in loop is optimized for generic objects, not arrays, and thus is 10-100 times slower. Of course, it’s still very fast. The speedup may only matter in bottlenecks. But still we should be aware of the difference.\n\n// Generally, we shouldn’t use for..in for arrays.\n\n//length is writable => Don't do this\n//clear array length = 0\n// let arr = [1, 2];\n// arr.length = 0;\n// console.log(arr[0]);\n\n//Don't compare arrays with ===\n\n\n// Let’s recall the rules:\n\n// Two objects are equal == only if they’re references to the same object.\n\n// If one of the arguments of == is an object, and the other one is a primitive, then the object gets converted to primitive, as explained in the chapter Object to primitive conversion.\n\n// …With an exception of null and undefined that equal == each other and nothing else.\n\n// The strict comparison === is even simpler, as it doesn’t convert types.\n\n// So, if we compare arrays with ==, they are never the same, unless we compare two variables that reference exactly the same array.\n\n// alert( [] == [] ); // false\n// alert( [0] == [0] ); // false\n\n\n// So, how to compare arrays?\n\n// That’s simple: don’t use the == operator. Instead, compare them item-by-item in a loop or using iteration methods \n\n\n/*-----------Array methods---------------*/\n\n//Add remove items\n// arr.push(...items) – adds items to the end,\n// arr.pop() – extracts an item from the end,\n// arr.shift() – extracts an item from the beginning,\n// arr.unshift(...items) – adds items to the beginning.\n\n//splice => insert remove and replace elements\n\n//slice create arrays => It’s similar to a string method str.slice, but instead of substrings it makes subarrays.\n\n//concat: new array hat includes values from other arrays and additional items.\n\n// let arr = [1, 2];\n// arr = arr.concat([3,4],[5,6], 7, 8);\n// console.log(arr);\n\n//Practical examples => top => Transform an array and search arrays\n\n//for comparing type of arrays\n//Array.isArray\n// alert(Array.isArray({})); // false\n\n// alert(Array.isArray([])); // true\n\n// Almost all array methods that call functions – like find, filter, map, with a notable exception of sort, accept an optional additional parameter thisArg. => Not used that often\n//we can cover probably while covering objects\n\n\n\n\n\n\n\n\n\n/*----------End--------------------------*/\n"},"lineCount":null}},"error":null,"hash":"06cb3092337937f67f72fc1a207a37e4","cacheData":{"env":{}}}