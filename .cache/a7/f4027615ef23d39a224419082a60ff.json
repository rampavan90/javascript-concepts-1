{"id":"js/valuereftypes.js","dependencies":[{"name":"/home/pavan/Documents/projects/unilog/javascript-concepts/package.json","includedInParent":true,"mtime":1620473750586}],"generated":{"js":"//pass by value => Boolean, null, undefined, String and Number(Primitive types)\n//pass by reference => Array, Function and Object (called a Objects)\n\n/*----Primitives----*/\n// var x = 10; // box x contains value 10, a primitve value\n// var y = 'abc';\n// var z = null;\n//they are copied to another variable by value\n// var x = 10;\n// var a = x;\n// var y = 'abc';\n// var b = y;\n// console.log(x, a, y, b);\n//basically values are copied , these variables are seperate\n// these variables are not linked\n// x = 15;\n// console.log(a, x);\n\n/*----Objects-------*/\n//Variables that are assigned a non-primitive value are given a reference to that value. That reference points to the object’s location in memory. The variables don’t actually contain the value.\n//Objects are given a location in memory, what variables stores is the address of the corresponding location\n// var arr = [];\n// arr.push(1);\n// console.log(arr);\n//value, the address contained by the variable is static\n//change is the array in memory\n//Assigning by reference\n//Objects are copied by reference instead of value\n// var reference = [1];\n// var refCopy = reference; // address is copied\n// reference.push(1);\n// console.log(reference, refCopy);\n// Reassigning a reference\n// var obj = { first: 'reference'}; //available for garbage collection\n// obj = { second: 'ref2'};\n// console.log(obj);\n// var person1 = {name: 'pavan', age: 25};\n// var person2 = {name: 'pavan', age: 25};\n// person2 = person1; //assignign the same ref\n// console.log(person1 === person2);\n// person2.name = 'kumar';\n// console.log(person1 === person2);\n// console.log(person1);\n// console.log(person2);\n// person1.name = 'unilog';\n// console.log(person1);\n// console.log(person2);\n// == and === check the reference\n//compare two objects if their properties are equal\n// let personOne = {name: 'ram'};\n// let personTwo = {name: 'ram'};\n// console.log(personOne === personTwo); //false\n// console.log(JSON.stringify(personOne) === JSON.stringify(personTwo)); //check if two object's properties are equal\n//other way is to recursively loop throught objects and check props\n\n/*----End-----------*/"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/valuereftypes.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"js/valuereftypes.js","original":{"line":2,"column":0}},{"generated":{"line":4,"column":0},"source":"js/valuereftypes.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"js/valuereftypes.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"js/valuereftypes.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"js/valuereftypes.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"js/valuereftypes.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"js/valuereftypes.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"js/valuereftypes.js","original":{"line":11,"column":0}},{"generated":{"line":11,"column":0},"source":"js/valuereftypes.js","original":{"line":12,"column":0}},{"generated":{"line":12,"column":0},"source":"js/valuereftypes.js","original":{"line":13,"column":0}},{"generated":{"line":13,"column":0},"source":"js/valuereftypes.js","original":{"line":14,"column":0}},{"generated":{"line":14,"column":0},"source":"js/valuereftypes.js","original":{"line":15,"column":0}},{"generated":{"line":15,"column":0},"source":"js/valuereftypes.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":0},"source":"js/valuereftypes.js","original":{"line":17,"column":0}},{"generated":{"line":17,"column":0},"source":"js/valuereftypes.js","original":{"line":18,"column":0}},{"generated":{"line":19,"column":0},"source":"js/valuereftypes.js","original":{"line":20,"column":0}},{"generated":{"line":20,"column":0},"source":"js/valuereftypes.js","original":{"line":21,"column":0}},{"generated":{"line":21,"column":0},"source":"js/valuereftypes.js","original":{"line":22,"column":0}},{"generated":{"line":22,"column":0},"source":"js/valuereftypes.js","original":{"line":24,"column":0}},{"generated":{"line":23,"column":0},"source":"js/valuereftypes.js","original":{"line":25,"column":0}},{"generated":{"line":24,"column":0},"source":"js/valuereftypes.js","original":{"line":26,"column":0}},{"generated":{"line":25,"column":0},"source":"js/valuereftypes.js","original":{"line":28,"column":0}},{"generated":{"line":26,"column":0},"source":"js/valuereftypes.js","original":{"line":29,"column":0}},{"generated":{"line":27,"column":0},"source":"js/valuereftypes.js","original":{"line":31,"column":0}},{"generated":{"line":28,"column":0},"source":"js/valuereftypes.js","original":{"line":32,"column":0}},{"generated":{"line":29,"column":0},"source":"js/valuereftypes.js","original":{"line":33,"column":0}},{"generated":{"line":30,"column":0},"source":"js/valuereftypes.js","original":{"line":34,"column":0}},{"generated":{"line":31,"column":0},"source":"js/valuereftypes.js","original":{"line":35,"column":0}},{"generated":{"line":32,"column":0},"source":"js/valuereftypes.js","original":{"line":36,"column":0}},{"generated":{"line":33,"column":0},"source":"js/valuereftypes.js","original":{"line":38,"column":0}},{"generated":{"line":34,"column":0},"source":"js/valuereftypes.js","original":{"line":39,"column":0}},{"generated":{"line":35,"column":0},"source":"js/valuereftypes.js","original":{"line":40,"column":0}},{"generated":{"line":36,"column":0},"source":"js/valuereftypes.js","original":{"line":41,"column":0}},{"generated":{"line":37,"column":0},"source":"js/valuereftypes.js","original":{"line":43,"column":0}},{"generated":{"line":38,"column":0},"source":"js/valuereftypes.js","original":{"line":44,"column":0}},{"generated":{"line":39,"column":0},"source":"js/valuereftypes.js","original":{"line":45,"column":0}},{"generated":{"line":40,"column":0},"source":"js/valuereftypes.js","original":{"line":46,"column":0}},{"generated":{"line":41,"column":0},"source":"js/valuereftypes.js","original":{"line":47,"column":0}},{"generated":{"line":42,"column":0},"source":"js/valuereftypes.js","original":{"line":48,"column":0}},{"generated":{"line":43,"column":0},"source":"js/valuereftypes.js","original":{"line":49,"column":0}},{"generated":{"line":44,"column":0},"source":"js/valuereftypes.js","original":{"line":50,"column":0}},{"generated":{"line":45,"column":0},"source":"js/valuereftypes.js","original":{"line":51,"column":0}},{"generated":{"line":46,"column":0},"source":"js/valuereftypes.js","original":{"line":52,"column":0}},{"generated":{"line":47,"column":0},"source":"js/valuereftypes.js","original":{"line":53,"column":0}},{"generated":{"line":48,"column":0},"source":"js/valuereftypes.js","original":{"line":54,"column":0}},{"generated":{"line":49,"column":0},"source":"js/valuereftypes.js","original":{"line":56,"column":0}},{"generated":{"line":50,"column":0},"source":"js/valuereftypes.js","original":{"line":57,"column":0}},{"generated":{"line":51,"column":0},"source":"js/valuereftypes.js","original":{"line":58,"column":0}},{"generated":{"line":52,"column":0},"source":"js/valuereftypes.js","original":{"line":59,"column":0}},{"generated":{"line":53,"column":0},"source":"js/valuereftypes.js","original":{"line":60,"column":0}},{"generated":{"line":54,"column":0},"source":"js/valuereftypes.js","original":{"line":61,"column":0}},{"generated":{"line":56,"column":0},"source":"js/valuereftypes.js","original":{"line":69,"column":0}}],"sources":{"js/valuereftypes.js":"//pass by value => Boolean, null, undefined, String and Number(Primitive types)\n//pass by reference => Array, Function and Object (called a Objects)\n\n/*----Primitives----*/\n// var x = 10; // box x contains value 10, a primitve value\n// var y = 'abc';\n// var z = null;\n\n//they are copied to another variable by value\n// var x = 10;\n// var a = x;\n// var y = 'abc';\n// var b = y;\n// console.log(x, a, y, b);\n//basically values are copied , these variables are seperate\n// these variables are not linked\n// x = 15;\n// console.log(a, x);\n\n/*----Objects-------*/\n//Variables that are assigned a non-primitive value are given a reference to that value. That reference points to the object’s location in memory. The variables don’t actually contain the value.\n//Objects are given a location in memory, what variables stores is the address of the corresponding location\n\n// var arr = [];\n// arr.push(1);\n// console.log(arr);\n\n//value, the address contained by the variable is static\n//change is the array in memory\n\n//Assigning by reference\n//Objects are copied by reference instead of value\n// var reference = [1];\n// var refCopy = reference; // address is copied\n// reference.push(1);\n// console.log(reference, refCopy);\n\n// Reassigning a reference\n// var obj = { first: 'reference'}; //available for garbage collection\n// obj = { second: 'ref2'};\n// console.log(obj);\n\n// var person1 = {name: 'pavan', age: 25};\n// var person2 = {name: 'pavan', age: 25};\n// person2 = person1; //assignign the same ref\n// console.log(person1 === person2);\n// person2.name = 'kumar';\n// console.log(person1 === person2);\n// console.log(person1);\n// console.log(person2);\n// person1.name = 'unilog';\n// console.log(person1);\n// console.log(person2);\n// == and === check the reference\n\n//compare two objects if their properties are equal\n// let personOne = {name: 'ram'};\n// let personTwo = {name: 'ram'};\n// console.log(personOne === personTwo); //false\n// console.log(JSON.stringify(personOne) === JSON.stringify(personTwo)); //check if two object's properties are equal\n//other way is to recursively loop throught objects and check props\n\n\n\n\n\n\n\n/*----End-----------*/\n"},"lineCount":null}},"error":null,"hash":"9a6fd4aedb6c63895de9f179f8717f66","cacheData":{"env":{}}}