{"id":"js/primitives.js","dependencies":[{"name":"/home/pavan/Documents/projects/unilog/javascript-concepts/package.json","includedInParent":true,"mtime":1620473750586}],"generated":{"js":"// Six data types => Primitives\n// undefined, Boolean, Number, String, BigInt, Symbol\n//All types except objects define immutable values (that is, values which can't be changed)\n//Structural types => Object, Function\n//Structural Root primitive => null\n//NaN => Propery on global object\n//----------Undefined--------//\n// undefined is a property of the global object. That is, it is a variable in global scope.\n// In modern browsers (JavaScript 1.8.5 / Firefox 4+), undefined is a non-configurable, non-writable property, per the ECMAScript 5 specification. (Even when this is not the case, avoid overriding it.)\n// A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned.\n//Don't do this\n// (function(undefined){\n//     console.log(undefined, typeof undefined);\n// })('foo');\n// var x;\n// if(x === undefined){\n//     console.log('x is undefined');\n// }else{\n//     console.log('x is defined');\n// }\n// var x;\n// if (typeof x === 'undefined') {\n//    // these statements execute\n// }\n//  x has not been declared before\n// if (typeof x === 'undefined') { //  evaluates to true without errors\n//     //  these statements execute\n//  }\n//  if (x === undefined) { //  throws a ReferenceError\n//  }\n// var  x;\n// if (x in window) {\n//     //  these statements execute only if x is defined globally\n//     console.log('x is defined');\n//   }\n//Using void Operator\n// var x;\n// if(x === void 0){\n//     //these statements execute\n// }\n// //y has not been declared before\n// if(y === void 0){\n//     // throws Uncaught ReferenceError : y is not defined\n// }\n//--------End-----------------//\n//-------Null-----------------//\n// The value null represents the intentional absence of any object value.\n// treated as falsy for Boolean operations\n// function getVowels(str) {\n//     const m = str.match(/[aeiou]/gi);\n//     if (m === null) {\n//       return 0;\n//     }\n//     return m.length;\n//   }\n//   console.log(getVowels('sky'));\n// expected output: 0\n//null is not an identifier for a property of the global object, like undefined can be.\n//Instead, null expresses a lack of identification, indicating that a variable points to no object.\n//In APIs, null is often retrieved in a place where an object can be expected but no object is relevant. \n//   foo; //ReferenceError: foo is not defined\n// foo is known to exist now but it has no type or value:\n// var foo = null;\n// foo; //null\n// Difference between null an undefined\n// typeof null          // \"object\" (not \"null\" for legacy reasons)\n// typeof undefined     // \"undefined\"\n// null === undefined   // false\n// null  == undefined   // true\n// null === null        // true\n// null == null         // true\n// !null                // true // null is falsy\n// isNaN(1 + null)      // false\n// isNaN(1 + undefined) // true\n//-------End-----------------//\n//----Boolean--------------//\n// In computer science, a Boolean is a logical data type that can have only the values true or false. For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute\n// for example in if statements and for loops\n// Boolean primitive values => true and false\n//The Boolean object is an object wrapper for a boolean value.\n// var x = new Boolean(undefined);\n// if(x){\n//     // this code is executed\n//     console.log('hello');\n// }\n// Any object of which the value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:\n// var x = new Boolean(false);\n// if (x) {\n//   // this code is executed\n// }\n// This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:\n// var x = false;\n// if (x) {\n//   // this code is not executed\n// }\n// Do not use a Boolean object to convert a non-boolean value to a boolean value. To perform this task, instead, use Boolean as a function, or a double NOT operator:\n// var x = Boolean(expression);     // use this...\n// var x = !!(expression);          // ...or this\n// var x = new Boolean(expression); // don't use this!\n// If you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.\n// var myFalse = new Boolean(false);   // initial value of false\n// var g = Boolean(myFalse);       // initial value of true\n// var myString = new String('Hello'); // string object\n// var s = Boolean(myString);      // initial value of true\n// Do not use a Boolean object in place of a Boolean primitive.\n\n/*---Boolean Objects with initial value of false-----*/\n// var bNoParam = new Boolean();\n// var bZero = new Boolean(0);\n// var bNull = new Boolean(null);\n// var bEmptyString = new Boolean('');\n// var bfalse = new Boolean(false);\n\n/*------------ Boolean Objects with inital value of true----------*/\n// var btrue = new Boolean(true);\n// var btrueString = new Boolean('true');\n// var bfalseString = new Boolean('false');\n// var bSuLin = new Boolean('Su Lin');\n// var bArrayProto = new Boolean([]);\n// var bObjProto = new Boolean({});\n// let names = bfalseString;\n// if(names){\n//     console.log('names exists');\n// }\n//---------------truthy values in js----------------------//\n// if (true)\n// if ({})\n// if ([])\n// if (42)\n// if (\"0\")\n// if (\"false\")\n// if (new Date())\n// if (-42)\n// if (12n)\n// if (3.14)\n// if (-3.14)\n// if (Infinity)\n// if (-Infinity)\n//--------falsy values in js--------------//\n//false\n//0\n// -0\n// 0n\n// \"\", '', ``\n// null\n// undefined\n// NaN\n// dcoument.all\n// false && \"dog\"\n// 0 && \"dog\"\n//----End------------------//\n\n/*-----------------NaN-------global property----it is a variable in global scope.-----------------*/\n// It represents not a number\n//propert attributes => Writable: no, Enumerable: no, Configurable: no\n// function sanitise(x) {\n//     if (isNaN(x)) {\n//       return NaN;\n//     }\n//     return x;\n//   }\n//   console.log(sanitise('1'));\n//   // expected output: \"1\"\n//   console.log(sanitise('NotANumber'));\n//   // expected output: NaN\n//The initial value of NaN is Not-A-Number — the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program.\n// There are five different types of operations that return NaN:\n//Number cannot be parsed \n// console.log(parseInt('Unilog'));\n//Math operation where the result is not a real number\n// console.log(Math.sqrt(-25));\n//Operand of an argument is NaN\n// console.log(0 + NaN)\n//Indeterminate form \n// console.log(0 *Infinity)\n// console.log(undefined + undefined);\n// Any operation that involves a string and is not an addition operation \n// console.log(\"foo\"/3);\n//What if you add\n// console.log(\"foo\" + 3);\n//Testing NaN will return unequal to any other value inclusing NaN\n// console.log(NaN === NaN);\n// Number.NaN === NaN; // false\n// isNaN(NaN);         // true\n// isNaN(Number.NaN);  // true\n// Number.isNaN(NaN);  // true\n//Difference between isNaN() and Number.isNaN(): Diffeence is coercion\n// isNaN('hello world');        // true\n// Number.isNaN('hello world'); // false\n//Additionally, some array methods cannot find NaN, while others can.\n// let arr = [2, 4, NaN, 12];\n// console.log(arr.indexOf(NaN));\n// console.log(arr.includes(NaN));\n// console.log(arr.findIndex(n => Number.isNaN(n)));\n\n/*---------End----------------------------------------------------*/\n\n/*--------Number-------------------------------------*/\n// ECMAScript has two built-in numeric types: Number and BigInt\n// a double-precision 64-bit binary format IEEE 754 value\n// -(253 − 1) and (253 − 1)\n// Symbolic values: +Infinity, -Infinity, NaN\n//Number.MAX_VALUE and Number.MIN_VALUE\n// 0 => +0. -0\n// -0 === +0\n//Trick: coerce number string to number => +\"number string\"\n// 42/+0 => exception\n// 42/-0  => exception\n//The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers.\n// A BigInt is created by appending n to the end of an integer or by calling the constructor.\n//example: const x = 2n ** 53n;\n\n/*--------End----------------------------------------*/\n\n/*-------String-----------*/\n// Represent texual data\n// Each element in the String occupies a position in the String. The first element is at index 0, the next at index 1, and so on. The length of a String is the number of elements in it.\n// JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it.\n// const str = 'Mozilla';\n// console.log(str.substr(1, 2));\n// // expected output: \"oz\"\n// console.log(str.substr(2));\n// // expected output: \"zilla\"\n// console.log(str);\n// //substr creates a new string\n// const str1 = 'Hello';\n// const str2 = 'World';\n// console.log(str1.concat(' ', str2));\n// // expected output: \"Hello World\"\n// console.log(str2.concat(', ', str1));\n// // expected output: \"World, Hello\"\n// For performance use +, += instead of concat()\n// Use strings for textual data. When representing complex data, parse strings, and use the appropriate abstraction.\n//Use array for a list of items\n\n/*-------End-------------- */\n\n/*---------------Symbol------------------*/\n// A Symbol is a unique and immutable primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called \"atoms\".\n\n/*-------------End-----------------------*/"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/primitives.js","original":{"line":3,"column":0}},{"generated":{"line":2,"column":0},"source":"js/primitives.js","original":{"line":4,"column":0}},{"generated":{"line":3,"column":0},"source":"js/primitives.js","original":{"line":5,"column":0}},{"generated":{"line":4,"column":0},"source":"js/primitives.js","original":{"line":8,"column":0}},{"generated":{"line":5,"column":0},"source":"js/primitives.js","original":{"line":11,"column":0}},{"generated":{"line":6,"column":0},"source":"js/primitives.js","original":{"line":13,"column":0}},{"generated":{"line":7,"column":0},"source":"js/primitives.js","original":{"line":15,"column":0}},{"generated":{"line":8,"column":0},"source":"js/primitives.js","original":{"line":16,"column":0}},{"generated":{"line":9,"column":0},"source":"js/primitives.js","original":{"line":17,"column":0}},{"generated":{"line":10,"column":0},"source":"js/primitives.js","original":{"line":18,"column":0}},{"generated":{"line":11,"column":0},"source":"js/primitives.js","original":{"line":20,"column":0}},{"generated":{"line":12,"column":0},"source":"js/primitives.js","original":{"line":21,"column":0}},{"generated":{"line":13,"column":0},"source":"js/primitives.js","original":{"line":22,"column":0}},{"generated":{"line":14,"column":0},"source":"js/primitives.js","original":{"line":23,"column":0}},{"generated":{"line":15,"column":0},"source":"js/primitives.js","original":{"line":25,"column":0}},{"generated":{"line":16,"column":0},"source":"js/primitives.js","original":{"line":26,"column":0}},{"generated":{"line":17,"column":0},"source":"js/primitives.js","original":{"line":27,"column":0}},{"generated":{"line":18,"column":0},"source":"js/primitives.js","original":{"line":28,"column":0}},{"generated":{"line":19,"column":0},"source":"js/primitives.js","original":{"line":29,"column":0}},{"generated":{"line":20,"column":0},"source":"js/primitives.js","original":{"line":30,"column":0}},{"generated":{"line":21,"column":0},"source":"js/primitives.js","original":{"line":32,"column":0}},{"generated":{"line":22,"column":0},"source":"js/primitives.js","original":{"line":33,"column":0}},{"generated":{"line":23,"column":0},"source":"js/primitives.js","original":{"line":34,"column":0}},{"generated":{"line":24,"column":0},"source":"js/primitives.js","original":{"line":35,"column":0}},{"generated":{"line":25,"column":0},"source":"js/primitives.js","original":{"line":37,"column":0}},{"generated":{"line":26,"column":0},"source":"js/primitives.js","original":{"line":38,"column":0}},{"generated":{"line":27,"column":0},"source":"js/primitives.js","original":{"line":39,"column":0}},{"generated":{"line":28,"column":0},"source":"js/primitives.js","original":{"line":40,"column":0}},{"generated":{"line":29,"column":0},"source":"js/primitives.js","original":{"line":42,"column":0}},{"generated":{"line":30,"column":0},"source":"js/primitives.js","original":{"line":44,"column":0}},{"generated":{"line":31,"column":0},"source":"js/primitives.js","original":{"line":47,"column":0}},{"generated":{"line":32,"column":0},"source":"js/primitives.js","original":{"line":48,"column":0}},{"generated":{"line":33,"column":0},"source":"js/primitives.js","original":{"line":49,"column":0}},{"generated":{"line":34,"column":0},"source":"js/primitives.js","original":{"line":50,"column":0}},{"generated":{"line":35,"column":0},"source":"js/primitives.js","original":{"line":51,"column":0}},{"generated":{"line":36,"column":0},"source":"js/primitives.js","original":{"line":53,"column":0}},{"generated":{"line":37,"column":0},"source":"js/primitives.js","original":{"line":54,"column":0}},{"generated":{"line":38,"column":0},"source":"js/primitives.js","original":{"line":55,"column":0}},{"generated":{"line":39,"column":0},"source":"js/primitives.js","original":{"line":56,"column":0}},{"generated":{"line":40,"column":0},"source":"js/primitives.js","original":{"line":57,"column":0}},{"generated":{"line":41,"column":0},"source":"js/primitives.js","original":{"line":59,"column":0}},{"generated":{"line":42,"column":0},"source":"js/primitives.js","original":{"line":60,"column":0}},{"generated":{"line":43,"column":0},"source":"js/primitives.js","original":{"line":61,"column":0}},{"generated":{"line":44,"column":0},"source":"js/primitives.js","original":{"line":62,"column":0}},{"generated":{"line":45,"column":0},"source":"js/primitives.js","original":{"line":63,"column":0}},{"generated":{"line":46,"column":0},"source":"js/primitives.js","original":{"line":65,"column":0}},{"generated":{"line":47,"column":0},"source":"js/primitives.js","original":{"line":66,"column":0}},{"generated":{"line":48,"column":0},"source":"js/primitives.js","original":{"line":67,"column":0}},{"generated":{"line":49,"column":0},"source":"js/primitives.js","original":{"line":68,"column":0}},{"generated":{"line":50,"column":0},"source":"js/primitives.js","original":{"line":69,"column":0}},{"generated":{"line":51,"column":0},"source":"js/primitives.js","original":{"line":70,"column":0}},{"generated":{"line":52,"column":0},"source":"js/primitives.js","original":{"line":71,"column":0}},{"generated":{"line":53,"column":0},"source":"js/primitives.js","original":{"line":72,"column":0}},{"generated":{"line":54,"column":0},"source":"js/primitives.js","original":{"line":73,"column":0}},{"generated":{"line":55,"column":0},"source":"js/primitives.js","original":{"line":74,"column":0}},{"generated":{"line":56,"column":0},"source":"js/primitives.js","original":{"line":76,"column":0}},{"generated":{"line":57,"column":0},"source":"js/primitives.js","original":{"line":77,"column":2}},{"generated":{"line":58,"column":0},"source":"js/primitives.js","original":{"line":78,"column":2}},{"generated":{"line":59,"column":0},"source":"js/primitives.js","original":{"line":79,"column":2}},{"generated":{"line":60,"column":0},"source":"js/primitives.js","original":{"line":80,"column":2}},{"generated":{"line":61,"column":0},"source":"js/primitives.js","original":{"line":82,"column":0}},{"generated":{"line":62,"column":0},"source":"js/primitives.js","original":{"line":84,"column":0}},{"generated":{"line":63,"column":0},"source":"js/primitives.js","original":{"line":85,"column":0}},{"generated":{"line":64,"column":0},"source":"js/primitives.js","original":{"line":86,"column":0}},{"generated":{"line":65,"column":0},"source":"js/primitives.js","original":{"line":88,"column":0}},{"generated":{"line":66,"column":0},"source":"js/primitives.js","original":{"line":89,"column":0}},{"generated":{"line":67,"column":0},"source":"js/primitives.js","original":{"line":90,"column":0}},{"generated":{"line":68,"column":0},"source":"js/primitives.js","original":{"line":91,"column":0}},{"generated":{"line":69,"column":0},"source":"js/primitives.js","original":{"line":92,"column":0}},{"generated":{"line":70,"column":0},"source":"js/primitives.js","original":{"line":93,"column":0}},{"generated":{"line":71,"column":0},"source":"js/primitives.js","original":{"line":94,"column":0}},{"generated":{"line":72,"column":0},"source":"js/primitives.js","original":{"line":95,"column":0}},{"generated":{"line":73,"column":0},"source":"js/primitives.js","original":{"line":96,"column":0}},{"generated":{"line":74,"column":0},"source":"js/primitives.js","original":{"line":97,"column":0}},{"generated":{"line":75,"column":0},"source":"js/primitives.js","original":{"line":99,"column":0}},{"generated":{"line":76,"column":0},"source":"js/primitives.js","original":{"line":101,"column":0}},{"generated":{"line":77,"column":0},"source":"js/primitives.js","original":{"line":102,"column":0}},{"generated":{"line":78,"column":0},"source":"js/primitives.js","original":{"line":103,"column":0}},{"generated":{"line":79,"column":0},"source":"js/primitives.js","original":{"line":104,"column":0}},{"generated":{"line":80,"column":0},"source":"js/primitives.js","original":{"line":105,"column":0}},{"generated":{"line":81,"column":0},"source":"js/primitives.js","original":{"line":106,"column":0}},{"generated":{"line":82,"column":0},"source":"js/primitives.js","original":{"line":107,"column":0}},{"generated":{"line":83,"column":0},"source":"js/primitives.js","original":{"line":108,"column":0}},{"generated":{"line":84,"column":0},"source":"js/primitives.js","original":{"line":109,"column":0}},{"generated":{"line":85,"column":0},"source":"js/primitives.js","original":{"line":110,"column":0}},{"generated":{"line":86,"column":0},"source":"js/primitives.js","original":{"line":112,"column":0}},{"generated":{"line":87,"column":0},"source":"js/primitives.js","original":{"line":114,"column":0}},{"generated":{"line":88,"column":0},"source":"js/primitives.js","original":{"line":115,"column":0}},{"generated":{"line":89,"column":0},"source":"js/primitives.js","original":{"line":116,"column":0}},{"generated":{"line":90,"column":0},"source":"js/primitives.js","original":{"line":117,"column":0}},{"generated":{"line":91,"column":0},"source":"js/primitives.js","original":{"line":118,"column":0}},{"generated":{"line":92,"column":0},"source":"js/primitives.js","original":{"line":119,"column":0}},{"generated":{"line":93,"column":0},"source":"js/primitives.js","original":{"line":120,"column":0}},{"generated":{"line":94,"column":0},"source":"js/primitives.js","original":{"line":121,"column":0}},{"generated":{"line":95,"column":0},"source":"js/primitives.js","original":{"line":122,"column":0}},{"generated":{"line":96,"column":0},"source":"js/primitives.js","original":{"line":123,"column":0}},{"generated":{"line":97,"column":0},"source":"js/primitives.js","original":{"line":125,"column":0}},{"generated":{"line":98,"column":0},"source":"js/primitives.js","original":{"line":126,"column":0}},{"generated":{"line":99,"column":0},"source":"js/primitives.js","original":{"line":127,"column":0}},{"generated":{"line":100,"column":0},"source":"js/primitives.js","original":{"line":130,"column":0}},{"generated":{"line":101,"column":0},"source":"js/primitives.js","original":{"line":131,"column":0}},{"generated":{"line":102,"column":0},"source":"js/primitives.js","original":{"line":132,"column":0}},{"generated":{"line":103,"column":0},"source":"js/primitives.js","original":{"line":133,"column":0}},{"generated":{"line":104,"column":0},"source":"js/primitives.js","original":{"line":134,"column":0}},{"generated":{"line":105,"column":0},"source":"js/primitives.js","original":{"line":137,"column":0}},{"generated":{"line":107,"column":0},"source":"js/primitives.js","original":{"line":141,"column":0}},{"generated":{"line":108,"column":0},"source":"js/primitives.js","original":{"line":142,"column":0}},{"generated":{"line":109,"column":0},"source":"js/primitives.js","original":{"line":143,"column":0}},{"generated":{"line":110,"column":0},"source":"js/primitives.js","original":{"line":144,"column":0}},{"generated":{"line":111,"column":0},"source":"js/primitives.js","original":{"line":145,"column":0}},{"generated":{"line":112,"column":0},"source":"js/primitives.js","original":{"line":146,"column":0}},{"generated":{"line":114,"column":0},"source":"js/primitives.js","original":{"line":148,"column":0}},{"generated":{"line":115,"column":0},"source":"js/primitives.js","original":{"line":149,"column":0}},{"generated":{"line":116,"column":0},"source":"js/primitives.js","original":{"line":150,"column":0}},{"generated":{"line":117,"column":0},"source":"js/primitives.js","original":{"line":151,"column":0}},{"generated":{"line":118,"column":0},"source":"js/primitives.js","original":{"line":152,"column":0}},{"generated":{"line":119,"column":0},"source":"js/primitives.js","original":{"line":153,"column":0}},{"generated":{"line":120,"column":0},"source":"js/primitives.js","original":{"line":154,"column":0}},{"generated":{"line":121,"column":0},"source":"js/primitives.js","original":{"line":156,"column":0}},{"generated":{"line":122,"column":0},"source":"js/primitives.js","original":{"line":157,"column":0}},{"generated":{"line":123,"column":0},"source":"js/primitives.js","original":{"line":158,"column":0}},{"generated":{"line":124,"column":0},"source":"js/primitives.js","original":{"line":159,"column":0}},{"generated":{"line":125,"column":0},"source":"js/primitives.js","original":{"line":161,"column":0}},{"generated":{"line":126,"column":0},"source":"js/primitives.js","original":{"line":162,"column":0}},{"generated":{"line":127,"column":0},"source":"js/primitives.js","original":{"line":163,"column":0}},{"generated":{"line":128,"column":0},"source":"js/primitives.js","original":{"line":164,"column":0}},{"generated":{"line":129,"column":0},"source":"js/primitives.js","original":{"line":165,"column":0}},{"generated":{"line":130,"column":0},"source":"js/primitives.js","original":{"line":166,"column":0}},{"generated":{"line":131,"column":0},"source":"js/primitives.js","original":{"line":167,"column":0}},{"generated":{"line":132,"column":0},"source":"js/primitives.js","original":{"line":168,"column":0}},{"generated":{"line":133,"column":0},"source":"js/primitives.js","original":{"line":169,"column":0}},{"generated":{"line":134,"column":0},"source":"js/primitives.js","original":{"line":170,"column":0}},{"generated":{"line":135,"column":0},"source":"js/primitives.js","original":{"line":171,"column":0}},{"generated":{"line":136,"column":0},"source":"js/primitives.js","original":{"line":172,"column":0}},{"generated":{"line":137,"column":0},"source":"js/primitives.js","original":{"line":173,"column":0}},{"generated":{"line":138,"column":0},"source":"js/primitives.js","original":{"line":174,"column":0}},{"generated":{"line":139,"column":0},"source":"js/primitives.js","original":{"line":176,"column":0}},{"generated":{"line":140,"column":0},"source":"js/primitives.js","original":{"line":177,"column":0}},{"generated":{"line":141,"column":0},"source":"js/primitives.js","original":{"line":178,"column":0}},{"generated":{"line":142,"column":0},"source":"js/primitives.js","original":{"line":179,"column":0}},{"generated":{"line":143,"column":0},"source":"js/primitives.js","original":{"line":180,"column":0}},{"generated":{"line":144,"column":0},"source":"js/primitives.js","original":{"line":181,"column":0}},{"generated":{"line":145,"column":0},"source":"js/primitives.js","original":{"line":182,"column":0}},{"generated":{"line":146,"column":0},"source":"js/primitives.js","original":{"line":183,"column":0}},{"generated":{"line":147,"column":0},"source":"js/primitives.js","original":{"line":184,"column":0}},{"generated":{"line":148,"column":0},"source":"js/primitives.js","original":{"line":185,"column":0}},{"generated":{"line":149,"column":0},"source":"js/primitives.js","original":{"line":186,"column":0}},{"generated":{"line":150,"column":0},"source":"js/primitives.js","original":{"line":187,"column":0}},{"generated":{"line":151,"column":0},"source":"js/primitives.js","original":{"line":189,"column":0}},{"generated":{"line":153,"column":0},"source":"js/primitives.js","original":{"line":191,"column":0}},{"generated":{"line":154,"column":0},"source":"js/primitives.js","original":{"line":192,"column":0}},{"generated":{"line":155,"column":0},"source":"js/primitives.js","original":{"line":193,"column":0}},{"generated":{"line":156,"column":0},"source":"js/primitives.js","original":{"line":195,"column":0}},{"generated":{"line":157,"column":0},"source":"js/primitives.js","original":{"line":196,"column":0}},{"generated":{"line":158,"column":0},"source":"js/primitives.js","original":{"line":197,"column":0}},{"generated":{"line":159,"column":0},"source":"js/primitives.js","original":{"line":198,"column":0}},{"generated":{"line":160,"column":0},"source":"js/primitives.js","original":{"line":199,"column":0}},{"generated":{"line":161,"column":0},"source":"js/primitives.js","original":{"line":200,"column":0}},{"generated":{"line":162,"column":0},"source":"js/primitives.js","original":{"line":202,"column":0}},{"generated":{"line":163,"column":0},"source":"js/primitives.js","original":{"line":203,"column":0}},{"generated":{"line":164,"column":0},"source":"js/primitives.js","original":{"line":205,"column":0}},{"generated":{"line":165,"column":0},"source":"js/primitives.js","original":{"line":206,"column":0}},{"generated":{"line":166,"column":0},"source":"js/primitives.js","original":{"line":207,"column":0}},{"generated":{"line":167,"column":0},"source":"js/primitives.js","original":{"line":209,"column":0}},{"generated":{"line":168,"column":0},"source":"js/primitives.js","original":{"line":211,"column":0}},{"generated":{"line":169,"column":0},"source":"js/primitives.js","original":{"line":212,"column":0}},{"generated":{"line":170,"column":0},"source":"js/primitives.js","original":{"line":214,"column":0}},{"generated":{"line":171,"column":0},"source":"js/primitives.js","original":{"line":215,"column":0}},{"generated":{"line":172,"column":0},"source":"js/primitives.js","original":{"line":217,"column":0}},{"generated":{"line":173,"column":0},"source":"js/primitives.js","original":{"line":218,"column":0}},{"generated":{"line":174,"column":0},"source":"js/primitives.js","original":{"line":220,"column":0}},{"generated":{"line":175,"column":0},"source":"js/primitives.js","original":{"line":221,"column":0}},{"generated":{"line":176,"column":0},"source":"js/primitives.js","original":{"line":222,"column":0}},{"generated":{"line":177,"column":0},"source":"js/primitives.js","original":{"line":224,"column":0}},{"generated":{"line":178,"column":0},"source":"js/primitives.js","original":{"line":225,"column":0}},{"generated":{"line":179,"column":0},"source":"js/primitives.js","original":{"line":226,"column":0}},{"generated":{"line":180,"column":0},"source":"js/primitives.js","original":{"line":227,"column":0}},{"generated":{"line":181,"column":0},"source":"js/primitives.js","original":{"line":229,"column":0}},{"generated":{"line":182,"column":0},"source":"js/primitives.js","original":{"line":230,"column":0}},{"generated":{"line":183,"column":0},"source":"js/primitives.js","original":{"line":231,"column":0}},{"generated":{"line":184,"column":0},"source":"js/primitives.js","original":{"line":232,"column":0}},{"generated":{"line":185,"column":0},"source":"js/primitives.js","original":{"line":233,"column":0}},{"generated":{"line":186,"column":0},"source":"js/primitives.js","original":{"line":234,"column":0}},{"generated":{"line":187,"column":0},"source":"js/primitives.js","original":{"line":236,"column":0}},{"generated":{"line":188,"column":0},"source":"js/primitives.js","original":{"line":237,"column":0}},{"generated":{"line":189,"column":0},"source":"js/primitives.js","original":{"line":238,"column":0}},{"generated":{"line":190,"column":0},"source":"js/primitives.js","original":{"line":240,"column":0}},{"generated":{"line":191,"column":0},"source":"js/primitives.js","original":{"line":242,"column":0}},{"generated":{"line":192,"column":0},"source":"js/primitives.js","original":{"line":243,"column":0}},{"generated":{"line":193,"column":0},"source":"js/primitives.js","original":{"line":244,"column":0}},{"generated":{"line":194,"column":0},"source":"js/primitives.js","original":{"line":245,"column":0}},{"generated":{"line":196,"column":0},"source":"js/primitives.js","original":{"line":247,"column":0}},{"generated":{"line":198,"column":0},"source":"js/primitives.js","original":{"line":249,"column":0}},{"generated":{"line":199,"column":0},"source":"js/primitives.js","original":{"line":250,"column":0}},{"generated":{"line":200,"column":0},"source":"js/primitives.js","original":{"line":251,"column":0}},{"generated":{"line":201,"column":0},"source":"js/primitives.js","original":{"line":252,"column":0}},{"generated":{"line":202,"column":0},"source":"js/primitives.js","original":{"line":253,"column":0}},{"generated":{"line":203,"column":0},"source":"js/primitives.js","original":{"line":254,"column":0}},{"generated":{"line":204,"column":0},"source":"js/primitives.js","original":{"line":256,"column":0}},{"generated":{"line":205,"column":0},"source":"js/primitives.js","original":{"line":257,"column":0}},{"generated":{"line":206,"column":0},"source":"js/primitives.js","original":{"line":258,"column":0}},{"generated":{"line":207,"column":0},"source":"js/primitives.js","original":{"line":259,"column":0}},{"generated":{"line":208,"column":0},"source":"js/primitives.js","original":{"line":260,"column":0}},{"generated":{"line":209,"column":0},"source":"js/primitives.js","original":{"line":262,"column":0}},{"generated":{"line":210,"column":0},"source":"js/primitives.js","original":{"line":264,"column":0}},{"generated":{"line":211,"column":0},"source":"js/primitives.js","original":{"line":266,"column":0}},{"generated":{"line":213,"column":0},"source":"js/primitives.js","original":{"line":268,"column":0}},{"generated":{"line":215,"column":0},"source":"js/primitives.js","original":{"line":270,"column":0}},{"generated":{"line":216,"column":0},"source":"js/primitives.js","original":{"line":271,"column":0}},{"generated":{"line":217,"column":0},"source":"js/primitives.js","original":{"line":272,"column":0}},{"generated":{"line":218,"column":0},"source":"js/primitives.js","original":{"line":273,"column":0}},{"generated":{"line":219,"column":0},"source":"js/primitives.js","original":{"line":274,"column":0}},{"generated":{"line":220,"column":0},"source":"js/primitives.js","original":{"line":277,"column":0}},{"generated":{"line":221,"column":0},"source":"js/primitives.js","original":{"line":278,"column":0}},{"generated":{"line":222,"column":0},"source":"js/primitives.js","original":{"line":280,"column":0}},{"generated":{"line":223,"column":0},"source":"js/primitives.js","original":{"line":281,"column":0}},{"generated":{"line":224,"column":0},"source":"js/primitives.js","original":{"line":282,"column":0}},{"generated":{"line":225,"column":0},"source":"js/primitives.js","original":{"line":283,"column":0}},{"generated":{"line":226,"column":0},"source":"js/primitives.js","original":{"line":285,"column":0}},{"generated":{"line":227,"column":0},"source":"js/primitives.js","original":{"line":286,"column":0}},{"generated":{"line":228,"column":0},"source":"js/primitives.js","original":{"line":288,"column":0}},{"generated":{"line":229,"column":0},"source":"js/primitives.js","original":{"line":289,"column":0}},{"generated":{"line":230,"column":0},"source":"js/primitives.js","original":{"line":291,"column":0}},{"generated":{"line":231,"column":0},"source":"js/primitives.js","original":{"line":292,"column":0}},{"generated":{"line":232,"column":0},"source":"js/primitives.js","original":{"line":294,"column":0}},{"generated":{"line":233,"column":0},"source":"js/primitives.js","original":{"line":296,"column":0}},{"generated":{"line":234,"column":0},"source":"js/primitives.js","original":{"line":297,"column":0}},{"generated":{"line":236,"column":0},"source":"js/primitives.js","original":{"line":299,"column":0}},{"generated":{"line":238,"column":0},"source":"js/primitives.js","original":{"line":301,"column":0}},{"generated":{"line":239,"column":0},"source":"js/primitives.js","original":{"line":302,"column":0}},{"generated":{"line":241,"column":0},"source":"js/primitives.js","original":{"line":303,"column":0}}],"sources":{"js/primitives.js":"\n\n// Six data types => Primitives\n// undefined, Boolean, Number, String, BigInt, Symbol\n//All types except objects define immutable values (that is, values which can't be changed)\n\n\n//Structural types => Object, Function\n\n\n//Structural Root primitive => null\n\n//NaN => Propery on global object\n\n//----------Undefined--------//\n// undefined is a property of the global object. That is, it is a variable in global scope.\n// In modern browsers (JavaScript 1.8.5 / Firefox 4+), undefined is a non-configurable, non-writable property, per the ECMAScript 5 specification. (Even when this is not the case, avoid overriding it.)\n// A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned.\n\n//Don't do this\n// (function(undefined){\n//     console.log(undefined, typeof undefined);\n// })('foo');\n\n// var x;\n// if(x === undefined){\n//     console.log('x is undefined');\n// }else{\n//     console.log('x is defined');\n// }\n\n// var x;\n// if (typeof x === 'undefined') {\n//    // these statements execute\n// }\n\n//  x has not been declared before\n// if (typeof x === 'undefined') { //  evaluates to true without errors\n//     //  these statements execute\n//  }\n \n//  if (x === undefined) { //  throws a ReferenceError\n \n//  }\n\n\n// var  x;\n// if (x in window) {\n//     //  these statements execute only if x is defined globally\n//     console.log('x is defined');\n//   }\n\n//Using void Operator\n// var x;\n// if(x === void 0){\n//     //these statements execute\n// }\n\n// //y has not been declared before\n// if(y === void 0){\n//     // throws Uncaught ReferenceError : y is not defined\n// }\n//--------End-----------------//\n\n//-------Null-----------------//\n// The value null represents the intentional absence of any object value.\n// treated as falsy for Boolean operations\n// function getVowels(str) {\n//     const m = str.match(/[aeiou]/gi);\n//     if (m === null) {\n//       return 0;\n//     }\n//     return m.length;\n//   }\n  \n//   console.log(getVowels('sky'));\n  // expected output: 0\n  //null is not an identifier for a property of the global object, like undefined can be.\n  //Instead, null expresses a lack of identification, indicating that a variable points to no object.\n  //In APIs, null is often retrieved in a place where an object can be expected but no object is relevant. \n\n//   foo; //ReferenceError: foo is not defined\n\n// foo is known to exist now but it has no type or value:\n// var foo = null;\n// foo; //null\n\n// Difference between null an undefined\n// typeof null          // \"object\" (not \"null\" for legacy reasons)\n// typeof undefined     // \"undefined\"\n// null === undefined   // false\n// null  == undefined   // true\n// null === null        // true\n// null == null         // true\n// !null                // true // null is falsy\n// isNaN(1 + null)      // false\n// isNaN(1 + undefined) // true\n\n//-------End-----------------//\n\n//----Boolean--------------//\n// In computer science, a Boolean is a logical data type that can have only the values true or false. For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute\n// for example in if statements and for loops\n// Boolean primitive values => true and false\n//The Boolean object is an object wrapper for a boolean value.\n// var x = new Boolean(undefined);\n// if(x){\n//     // this code is executed\n//     console.log('hello');\n// }\n\n// Any object of which the value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:\n\n// var x = new Boolean(false);\n// if (x) {\n//   // this code is executed\n// }\n// This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:\n// var x = false;\n// if (x) {\n//   // this code is not executed\n// }\n// Do not use a Boolean object to convert a non-boolean value to a boolean value. To perform this task, instead, use Boolean as a function, or a double NOT operator:\n\n// var x = Boolean(expression);     // use this...\n// var x = !!(expression);          // ...or this\n// var x = new Boolean(expression); // don't use this!\n\n\n// If you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.\n// var myFalse = new Boolean(false);   // initial value of false\n// var g = Boolean(myFalse);       // initial value of true\n// var myString = new String('Hello'); // string object\n// var s = Boolean(myString);      // initial value of true\n\n\n// Do not use a Boolean object in place of a Boolean primitive.\n\n\n\n/*---Boolean Objects with initial value of false-----*/\n// var bNoParam = new Boolean();\n// var bZero = new Boolean(0);\n// var bNull = new Boolean(null);\n// var bEmptyString = new Boolean('');\n// var bfalse = new Boolean(false);\n\n/*------------ Boolean Objects with inital value of true----------*/\n// var btrue = new Boolean(true);\n// var btrueString = new Boolean('true');\n// var bfalseString = new Boolean('false');\n// var bSuLin = new Boolean('Su Lin');\n// var bArrayProto = new Boolean([]);\n// var bObjProto = new Boolean({});\n\n// let names = bfalseString;\n// if(names){\n//     console.log('names exists');\n// }\n\n//---------------truthy values in js----------------------//\n// if (true)\n// if ({})\n// if ([])\n// if (42)\n// if (\"0\")\n// if (\"false\")\n// if (new Date())\n// if (-42)\n// if (12n)\n// if (3.14)\n// if (-3.14)\n// if (Infinity)\n// if (-Infinity)\n\n//--------falsy values in js--------------//\n//false\n//0\n// -0\n// 0n\n// \"\", '', ``\n// null\n// undefined\n// NaN\n// dcoument.all\n// false && \"dog\"\n// 0 && \"dog\"\n\n//----End------------------//\n\n/*-----------------NaN-------global property----it is a variable in global scope.-----------------*/\n// It represents not a number\n//propert attributes => Writable: no, Enumerable: no, Configurable: no\n\n// function sanitise(x) {\n//     if (isNaN(x)) {\n//       return NaN;\n//     }\n//     return x;\n//   }\n  \n//   console.log(sanitise('1'));\n//   // expected output: \"1\"\n  \n//   console.log(sanitise('NotANumber'));\n//   // expected output: NaN\n//The initial value of NaN is Not-A-Number — the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program.\n\n// There are five different types of operations that return NaN:\n\n//Number cannot be parsed \n// console.log(parseInt('Unilog'));\n\n//Math operation where the result is not a real number\n// console.log(Math.sqrt(-25));\n\n//Operand of an argument is NaN\n// console.log(0 + NaN)\n\n//Indeterminate form \n// console.log(0 *Infinity)\n// console.log(undefined + undefined);\n\n// Any operation that involves a string and is not an addition operation \n// console.log(\"foo\"/3);\n//What if you add\n// console.log(\"foo\" + 3);\n\n//Testing NaN will return unequal to any other value inclusing NaN\n// console.log(NaN === NaN);\n// Number.NaN === NaN; // false\n// isNaN(NaN);         // true\n// isNaN(Number.NaN);  // true\n// Number.isNaN(NaN);  // true\n\n//Difference between isNaN() and Number.isNaN(): Diffeence is coercion\n// isNaN('hello world');        // true\n// Number.isNaN('hello world'); // false\n\n//Additionally, some array methods cannot find NaN, while others can.\n\n// let arr = [2, 4, NaN, 12];\n// console.log(arr.indexOf(NaN));\n// console.log(arr.includes(NaN));\n// console.log(arr.findIndex(n => Number.isNaN(n)));\n\n/*---------End----------------------------------------------------*/\n\n/*--------Number-------------------------------------*/\n// ECMAScript has two built-in numeric types: Number and BigInt\n// a double-precision 64-bit binary format IEEE 754 value\n// -(253 − 1) and (253 − 1)\n// Symbolic values: +Infinity, -Infinity, NaN\n//Number.MAX_VALUE and Number.MIN_VALUE\n\n// 0 => +0. -0\n// -0 === +0\n//Trick: coerce number string to number => +\"number string\"\n// 42/+0 => exception\n// 42/-0  => exception\n\n//The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers.\n\n// A BigInt is created by appending n to the end of an integer or by calling the constructor.\n\n//example: const x = 2n ** 53n;\n\n/*--------End----------------------------------------*/\n\n/*-------String-----------*/\n// Represent texual data\n// Each element in the String occupies a position in the String. The first element is at index 0, the next at index 1, and so on. The length of a String is the number of elements in it.\n// JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it.\n// const str = 'Mozilla';\n\n\n// console.log(str.substr(1, 2));\n// // expected output: \"oz\"\n\n// console.log(str.substr(2));\n// // expected output: \"zilla\"\n// console.log(str);\n// //substr creates a new string\n\n// const str1 = 'Hello';\n// const str2 = 'World';\n\n// console.log(str1.concat(' ', str2));\n// // expected output: \"Hello World\"\n\n// console.log(str2.concat(', ', str1));\n// // expected output: \"World, Hello\"\n\n// For performance use +, += instead of concat()\n\n// Use strings for textual data. When representing complex data, parse strings, and use the appropriate abstraction.\n//Use array for a list of items\n\n/*-------End-------------- */\n\n/*---------------Symbol------------------*/\n// A Symbol is a unique and immutable primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called \"atoms\".\n/*-------------End-----------------------*/\n\n\n\n\n\n\n\n\n"},"lineCount":null}},"error":null,"hash":"d87d9e26587d179702ba47bd1a135dca","cacheData":{"env":{}}}