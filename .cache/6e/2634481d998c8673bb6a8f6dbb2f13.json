{"id":"js/implicittyping.js","dependencies":[{"name":"/home/pavan/Documents/projects/unilog/javascript-concepts/package.json","includedInParent":true,"mtime":1620473750586}],"generated":{"js":"// Javascript's implicit coercion simply refers to Javascript attempting to coerce an unexpected value type to the expected type. \n// pass a string when number is expected, object where string is expected\n// Please aware of it and try to avoid if you can\n\n/*-----examples-------*/\n// console.log(3 * \"3\");\n// console.log(1 + \"2\" + 1);\n// console.log(true + true);\n// console.log(10 - true);\n// console.log(false - 10);\n// const foo = {\n//     valueOf: () => 2\n//   }\n// console.log(3 + foo);\n//JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n// const bar = {\n//     toString: () => \" promise is a boy :)\"\n//   }\n// console.log(1 + bar) // \"1 promise is a boy :)\"\n// console.log(4 * []);\n// console.log(4 * [2]);\n// console.log(4 + [2]);\n// console.log(4 + [1, 2]);\n// console.log(4 * [1,2]);\n\n/*--------Rules-------*/\n// Whenever you pass a string as an operand in a numeric expression involving either of these operators: -, *, /, %, the number's conversion process is similar to calling the in-built Number function on the value. \n//example\n// 3 * \"3\" // 3 * 3\n// 3 * Number(\"3\") // 3 * 3\n// Number(\"5\") // 5\n// console.log(Number(\"%^%\"));\n// The case for the + operator\n// concatenation\n// 1 + \"2\" // \"12\"\n// 1 + \"js\" // \"1js\"\n// addition\n// 1 + 2 // 3\n// 1 + 2 + 1 // 4\n//addition, then concatenation\n// 1 + 2 + \"1\" // \"31\"\n// console.log((1 + 2) + \"1\") // \"31\"\n//concatenation all through\n// 1 + \"2\" + 1 // \"121\"\n// (1 + \"2\") + 1 // \"121\"\n//Objects\n// console.log(\"name\" + {});\n//Every javascript Object inherits a toString method, that is called whenever an Object is to be converted to a string. \n// const foo = {};\n// console.log(foo.toString());\n// const baz = {\n//     toString: () => \"I'm object baz\"\n//   }\n//   baz + \"!\" // \"I'm object baz!\"\n//Arrays\n//The inherited toString method of Arrays work abit differently, it works in a way similar to calling the join method of an array without any arguments.\n// console.log([1,2,3].toString());\n// console.log([1,2,3].join());\n// console.log([].toString());\n// console.log([].join());\n// console.log(\"me\" + [1,2,3]);\n// 4 + [1,2,3] // \"41,2,3\"\n// 4 * [1,2,3] // NaN\n//True and false and \"\"\n// console.log(Number(true));\n// console.log(Number(false));\n// console.log(Number(\"\"));\n// 4 + true // 5\n// 3 * false // 0\n// 3 * \"\" // 0\n// 3 + \"\" // \"3\"\n//Tip for using null\n//checking if your variable has some value => not null or undefined\n// let x = null;\n// let x;\n// if(x == null){ // not === // avoid ugly (x === null || x === undefined)\n//     console.log('x is null');\n// }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/implicittyping.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"js/implicittyping.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"js/implicittyping.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"js/implicittyping.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"js/implicittyping.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"js/implicittyping.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"js/implicittyping.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"js/implicittyping.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"js/implicittyping.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"js/implicittyping.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"js/implicittyping.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"js/implicittyping.js","original":{"line":13,"column":0}},{"generated":{"line":14,"column":0},"source":"js/implicittyping.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"js/implicittyping.js","original":{"line":15,"column":0}},{"generated":{"line":16,"column":0},"source":"js/implicittyping.js","original":{"line":17,"column":0}},{"generated":{"line":17,"column":0},"source":"js/implicittyping.js","original":{"line":18,"column":0}},{"generated":{"line":18,"column":0},"source":"js/implicittyping.js","original":{"line":19,"column":0}},{"generated":{"line":19,"column":0},"source":"js/implicittyping.js","original":{"line":20,"column":0}},{"generated":{"line":20,"column":0},"source":"js/implicittyping.js","original":{"line":21,"column":0}},{"generated":{"line":21,"column":0},"source":"js/implicittyping.js","original":{"line":22,"column":0}},{"generated":{"line":22,"column":0},"source":"js/implicittyping.js","original":{"line":23,"column":0}},{"generated":{"line":23,"column":0},"source":"js/implicittyping.js","original":{"line":24,"column":0}},{"generated":{"line":24,"column":0},"source":"js/implicittyping.js","original":{"line":25,"column":0}},{"generated":{"line":26,"column":0},"source":"js/implicittyping.js","original":{"line":27,"column":0}},{"generated":{"line":27,"column":0},"source":"js/implicittyping.js","original":{"line":28,"column":0}},{"generated":{"line":28,"column":0},"source":"js/implicittyping.js","original":{"line":30,"column":0}},{"generated":{"line":29,"column":0},"source":"js/implicittyping.js","original":{"line":32,"column":0}},{"generated":{"line":30,"column":0},"source":"js/implicittyping.js","original":{"line":33,"column":0}},{"generated":{"line":31,"column":0},"source":"js/implicittyping.js","original":{"line":34,"column":0}},{"generated":{"line":32,"column":0},"source":"js/implicittyping.js","original":{"line":35,"column":0}},{"generated":{"line":33,"column":0},"source":"js/implicittyping.js","original":{"line":37,"column":0}},{"generated":{"line":34,"column":0},"source":"js/implicittyping.js","original":{"line":39,"column":0}},{"generated":{"line":35,"column":0},"source":"js/implicittyping.js","original":{"line":40,"column":0}},{"generated":{"line":36,"column":0},"source":"js/implicittyping.js","original":{"line":41,"column":0}},{"generated":{"line":37,"column":0},"source":"js/implicittyping.js","original":{"line":44,"column":0}},{"generated":{"line":38,"column":0},"source":"js/implicittyping.js","original":{"line":45,"column":0}},{"generated":{"line":39,"column":0},"source":"js/implicittyping.js","original":{"line":46,"column":0}},{"generated":{"line":40,"column":0},"source":"js/implicittyping.js","original":{"line":48,"column":0}},{"generated":{"line":41,"column":0},"source":"js/implicittyping.js","original":{"line":49,"column":0}},{"generated":{"line":42,"column":0},"source":"js/implicittyping.js","original":{"line":50,"column":0}},{"generated":{"line":43,"column":0},"source":"js/implicittyping.js","original":{"line":52,"column":0}},{"generated":{"line":44,"column":0},"source":"js/implicittyping.js","original":{"line":53,"column":0}},{"generated":{"line":45,"column":0},"source":"js/implicittyping.js","original":{"line":54,"column":0}},{"generated":{"line":46,"column":0},"source":"js/implicittyping.js","original":{"line":56,"column":0}},{"generated":{"line":47,"column":0},"source":"js/implicittyping.js","original":{"line":58,"column":0}},{"generated":{"line":48,"column":0},"source":"js/implicittyping.js","original":{"line":59,"column":0}},{"generated":{"line":49,"column":0},"source":"js/implicittyping.js","original":{"line":61,"column":0}},{"generated":{"line":50,"column":0},"source":"js/implicittyping.js","original":{"line":62,"column":0}},{"generated":{"line":51,"column":0},"source":"js/implicittyping.js","original":{"line":64,"column":0}},{"generated":{"line":52,"column":0},"source":"js/implicittyping.js","original":{"line":65,"column":0}},{"generated":{"line":53,"column":0},"source":"js/implicittyping.js","original":{"line":66,"column":0}},{"generated":{"line":54,"column":0},"source":"js/implicittyping.js","original":{"line":68,"column":0}},{"generated":{"line":55,"column":0},"source":"js/implicittyping.js","original":{"line":71,"column":0}},{"generated":{"line":56,"column":0},"source":"js/implicittyping.js","original":{"line":72,"column":0}},{"generated":{"line":57,"column":0},"source":"js/implicittyping.js","original":{"line":74,"column":0}},{"generated":{"line":58,"column":0},"source":"js/implicittyping.js","original":{"line":75,"column":0}},{"generated":{"line":59,"column":0},"source":"js/implicittyping.js","original":{"line":76,"column":0}},{"generated":{"line":60,"column":0},"source":"js/implicittyping.js","original":{"line":77,"column":0}},{"generated":{"line":61,"column":0},"source":"js/implicittyping.js","original":{"line":78,"column":0}},{"generated":{"line":62,"column":0},"source":"js/implicittyping.js","original":{"line":79,"column":0}},{"generated":{"line":63,"column":0},"source":"js/implicittyping.js","original":{"line":80,"column":0}},{"generated":{"line":64,"column":0},"source":"js/implicittyping.js","original":{"line":82,"column":0}},{"generated":{"line":65,"column":0},"source":"js/implicittyping.js","original":{"line":83,"column":0}},{"generated":{"line":66,"column":0},"source":"js/implicittyping.js","original":{"line":84,"column":0}},{"generated":{"line":67,"column":0},"source":"js/implicittyping.js","original":{"line":85,"column":0}},{"generated":{"line":68,"column":0},"source":"js/implicittyping.js","original":{"line":86,"column":0}},{"generated":{"line":69,"column":0},"source":"js/implicittyping.js","original":{"line":87,"column":0}},{"generated":{"line":70,"column":0},"source":"js/implicittyping.js","original":{"line":88,"column":0}},{"generated":{"line":71,"column":0},"source":"js/implicittyping.js","original":{"line":89,"column":0}},{"generated":{"line":72,"column":0},"source":"js/implicittyping.js","original":{"line":91,"column":0}},{"generated":{"line":73,"column":0},"source":"js/implicittyping.js","original":{"line":92,"column":0}},{"generated":{"line":74,"column":0},"source":"js/implicittyping.js","original":{"line":94,"column":0}},{"generated":{"line":75,"column":0},"source":"js/implicittyping.js","original":{"line":95,"column":0}},{"generated":{"line":76,"column":0},"source":"js/implicittyping.js","original":{"line":96,"column":0}},{"generated":{"line":77,"column":0},"source":"js/implicittyping.js","original":{"line":97,"column":0}},{"generated":{"line":78,"column":0},"source":"js/implicittyping.js","original":{"line":98,"column":0}}],"sources":{"js/implicittyping.js":"// Javascript's implicit coercion simply refers to Javascript attempting to coerce an unexpected value type to the expected type. \n// pass a string when number is expected, object where string is expected\n// Please aware of it and try to avoid if you can\n\n/*-----examples-------*/\n// console.log(3 * \"3\");\n// console.log(1 + \"2\" + 1);\n// console.log(true + true);\n// console.log(10 - true);\n// console.log(false - 10);\n// const foo = {\n//     valueOf: () => 2\n//   }\n// console.log(3 + foo);\n//JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\n// const bar = {\n//     toString: () => \" promise is a boy :)\"\n//   }\n// console.log(1 + bar) // \"1 promise is a boy :)\"\n// console.log(4 * []);\n// console.log(4 * [2]);\n// console.log(4 + [2]);\n// console.log(4 + [1, 2]);\n// console.log(4 * [1,2]);\n\n/*--------Rules-------*/\n// Whenever you pass a string as an operand in a numeric expression involving either of these operators: -, *, /, %, the number's conversion process is similar to calling the in-built Number function on the value. \n\n//example\n\n// 3 * \"3\" // 3 * 3\n// 3 * Number(\"3\") // 3 * 3\n// Number(\"5\") // 5\n// console.log(Number(\"%^%\"));\n\n// The case for the + operator\n\n// concatenation\n// 1 + \"2\" // \"12\"\n// 1 + \"js\" // \"1js\"\n\n\n// addition\n// 1 + 2 // 3\n// 1 + 2 + 1 // 4\n\n//addition, then concatenation\n// 1 + 2 + \"1\" // \"31\"\n// console.log((1 + 2) + \"1\") // \"31\"\n\n//concatenation all through\n// 1 + \"2\" + 1 // \"121\"\n// (1 + \"2\") + 1 // \"121\"\n\n//Objects\n\n// console.log(\"name\" + {});\n//Every javascript Object inherits a toString method, that is called whenever an Object is to be converted to a string. \n\n// const foo = {};\n// console.log(foo.toString());\n\n// const baz = {\n//     toString: () => \"I'm object baz\"\n//   }\n  \n//   baz + \"!\" // \"I'm object baz!\"\n\n\n//Arrays\n//The inherited toString method of Arrays work abit differently, it works in a way similar to calling the join method of an array without any arguments.\n\n// console.log([1,2,3].toString());\n// console.log([1,2,3].join());\n// console.log([].toString());\n// console.log([].join());\n// console.log(\"me\" + [1,2,3]);\n// 4 + [1,2,3] // \"41,2,3\"\n// 4 * [1,2,3] // NaN\n\n//True and false and \"\"\n// console.log(Number(true));\n// console.log(Number(false));\n// console.log(Number(\"\"));\n// 4 + true // 5\n// 3 * false // 0\n// 3 * \"\" // 0\n// 3 + \"\" // \"3\"\n\n//Tip for using null\n//checking if your variable has some value => not null or undefined\n\n// let x = null;\n// let x;\n// if(x == null){ // not === // avoid ugly (x === null || x === undefined)\n//     console.log('x is null');\n// }\n\n\n"},"lineCount":null}},"error":null,"hash":"77722301c021ee1e7cc3409f7137be4c","cacheData":{"env":{}}}